-- Create ENUM types
CREATE TYPE severity_level AS ENUM ('HIGH', 'CRITICAL', 'MEDIUM');
CREATE TYPE feedback_status AS ENUM ('PENDING', 'IGNORED', 'RESOLVED');
CREATE TYPE training_reason_type AS ENUM ('FEEDBACK', 'NEW_DATA', 'ADMIN_INITIATIVE');
CREATE TYPE training_status AS ENUM ('SUCCESS', 'FAILING');
CREATE TYPE label AS ENUM ('SIMILAR', 'MODERATELY_SIMILAR', 'COMPLETELY_DIFFERENT');

-- Feedback Table
CREATE TABLE IF NOT EXISTS feedback (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY,
    severity severity_level NOT NULL,
    status feedback_status NOT NULL DEFAULT 'PENDING',
    test_name VARCHAR(255) NOT NULL,
    test_number VARCHAR(50) NOT NULL,
    lot VARCHAR(100) NOT NULL,
    insertion VARCHAR(50) NOT NULL,
    initial_label VARCHAR(100) NOT NULL,
    new_label VARCHAR(100),
    reference_id VARCHAR(255) NOT NULL,
    input_id VARCHAR(255) NOT NULL,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY(id)
);

-- Input Data Table
CREATE TABLE IF NOT EXISTS input_data (
    input_id VARCHAR(255) PRIMARY KEY,
    insertion VARCHAR(50) NOT NULL,
    test_name VARCHAR(255) NOT NULL,
    test_number VARCHAR(50) NOT NULL,
    lsl FLOAT,  -- Allowing NaN
    usl FLOAT,  -- Allowing NaN
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);

-- Create a separate table for chip measurements
CREATE TABLE IF NOT EXISTS input_measurements (
    input_id VARCHAR(255) REFERENCES input_data(input_id),
    chip_number INTEGER NOT NULL,
    value FLOAT,  -- Allowing NaN
    PRIMARY KEY (input_id, chip_number)
);

-- Reference Table
CREATE TABLE IF NOT EXISTS reference_data (
    reference_id VARCHAR(255) PRIMARY KEY,
    product VARCHAR(100) NOT NULL,
    lot VARCHAR(100) NOT NULL,
    insertion VARCHAR(50) NOT NULL,
    test_name VARCHAR(255) NOT NULL,
    test_number VARCHAR(50) NOT NULL,
    lsl FLOAT,  -- Allowing NaN
    usl FLOAT,  -- Allowing NaN
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);

-- Reference measurements table
CREATE TABLE IF NOT EXISTS reference_measurements (
    reference_id VARCHAR(255) REFERENCES reference_data(reference_id),
    chip_number INTEGER NOT NULL,
    value FLOAT,  -- Allowing NaN
    PRIMARY KEY (reference_id, chip_number)
);

-- Model Metrics/Training Table
CREATE TABLE IF NOT EXISTS model_metrics (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY,
    accuracy FLOAT,  -- Allowing NaN
    confidence FLOAT,  -- Allowing NaN
    error_rate FLOAT,  -- Allowing NaN
    model_version VARCHAR(50) NOT NULL,
    model_path VARCHAR(255) NOT NULL,
    training_reason training_reason_type NOT NULL,
    status training_status NOT NULL,
    training_duration INTEGER, -- in seconds
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY(id)
);

-- API Logs Table
CREATE TABLE IF NOT EXISTS api_logs (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY,
    endpoint VARCHAR(255) NOT NULL,
    method VARCHAR(10) NOT NULL,
    status_code INTEGER NOT NULL,
    response_time FLOAT,  -- Allowing NaN
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY(id)
);

-- Model Settings Table
CREATE TABLE IF NOT EXISTS model_settings (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY,
    confidence_threshold FLOAT,  -- Allowing NaN
    critical_issue_weight FLOAT,  -- Allowing NaN
    high_priority_weight FLOAT,  -- Allowing NaN
    normal_priority_weight FLOAT,  -- Allowing NaN
    auto_retrain BOOLEAN NOT NULL DEFAULT true,
    retraining_schedule VARCHAR(50) NOT NULL,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY(id)
);

-- Create Training Table
CREATE TABLE IF NOT EXISTS training (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY,
    reference_id_1 VARCHAR(255) NOT NULL,
    reference_id_2 VARCHAR(255) NOT NULL,
    status label NOT NULL DEFAULT 'COMPLETELY_DIFFERENT',
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY(id),
    FOREIGN KEY (reference_id_1) REFERENCES reference_data(reference_id),
    FOREIGN KEY (reference_id_2) REFERENCES reference_data(reference_id)
);

-- Create indexes
CREATE INDEX IF NOT EXISTS idx_training_reference_id_1 ON training(reference_id_1);
CREATE INDEX IF NOT EXISTS idx_training_reference_id_2 ON training(reference_id_2);
CREATE INDEX IF NOT EXISTS idx_training_created_at ON training(created_at);
CREATE INDEX IF NOT EXISTS idx_feedback_created_at ON feedback(created_at);
CREATE INDEX IF NOT EXISTS idx_feedback_test_name ON feedback(test_name);
CREATE INDEX IF NOT EXISTS idx_feedback_status ON feedback(status);
CREATE INDEX IF NOT EXISTS idx_feedback_severity ON feedback(severity);
CREATE INDEX IF NOT EXISTS idx_input_test_name ON input_data(test_name);
CREATE INDEX IF NOT EXISTS idx_reference_test_name ON reference_data(test_name);
CREATE INDEX IF NOT EXISTS idx_model_metrics_version ON model_metrics(model_version);
CREATE INDEX IF NOT EXISTS idx_model_metrics_created_at ON model_metrics(created_at);

-- Insert default model settings if not exists
INSERT INTO model_settings (
    confidence_threshold,
    critical_issue_weight,
    high_priority_weight,
    normal_priority_weight,
    retraining_schedule
) 
SELECT 
    0.95,
    10.0,
    7.0,
    3.0,
    'weekly'
WHERE NOT EXISTS (SELECT 1 FROM model_settings);

-- Create a function to check if a value is NaN
CREATE OR REPLACE FUNCTION is_nan(f FLOAT)
RETURNS BOOLEAN AS $$
BEGIN
    RETURN f != f;
END;
$$ LANGUAGE plpgsql IMMUTABLE;